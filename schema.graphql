# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Person {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  memberships(where: MembershipWhereInput! = {}, orderBy: [MembershipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MembershipWhereUniqueInput): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
  profiles(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProfileWhereUniqueInput): [Profile!]
  profilesCount(where: ProfileWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input PersonWhereUniqueInput {
  id: ID
  email: String
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
  memberships: MembershipManyRelationFilter
  profiles: ProfileManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input MembershipManyRelationFilter {
  every: MembershipWhereInput
  some: MembershipWhereInput
  none: MembershipWhereInput
}

input ProfileManyRelationFilter {
  every: ProfileWhereInput
  some: ProfileWhereInput
  none: ProfileWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PersonUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  memberships: MembershipRelateToManyForUpdateInput
  profiles: ProfileRelateToManyForUpdateInput
}

input MembershipRelateToManyForUpdateInput {
  disconnect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  create: [MembershipCreateInput!]
  connect: [MembershipWhereUniqueInput!]
}

input ProfileRelateToManyForUpdateInput {
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  create: [ProfileCreateInput!]
  connect: [ProfileWhereUniqueInput!]
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  memberships: MembershipRelateToManyForCreateInput
  profiles: ProfileRelateToManyForCreateInput
}

input MembershipRelateToManyForCreateInput {
  create: [MembershipCreateInput!]
  connect: [MembershipWhereUniqueInput!]
}

input ProfileRelateToManyForCreateInput {
  create: [ProfileCreateInput!]
  connect: [ProfileWhereUniqueInput!]
}

type Profile {
  id: ID!
  owner: Person
  nickname: String
  bio: String
  avatar: String
}

input ProfileWhereUniqueInput {
  id: ID
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IDFilter
  owner: PersonWhereInput
  nickname: StringFilter
  bio: StringFilter
  avatar: StringFilter
}

input ProfileOrderByInput {
  id: OrderDirection
  nickname: OrderDirection
  bio: OrderDirection
  avatar: OrderDirection
}

input ProfileUpdateInput {
  owner: PersonRelateToOneForUpdateInput
  nickname: String
  bio: String
  avatar: String
}

input PersonRelateToOneForUpdateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
}

input ProfileUpdateArgs {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateInput!
}

input ProfileCreateInput {
  owner: PersonRelateToOneForCreateInput
  nickname: String
  bio: String
  avatar: String
}

input PersonRelateToOneForCreateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type Community {
  id: ID!
  name: String
  slug: String
  description: String
  status: CommunityStatusType
  memberships(where: MembershipWhereInput! = {}, orderBy: [MembershipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MembershipWhereUniqueInput): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
}

enum CommunityStatusType {
  PUBLIC
  PRIVATE
}

input CommunityWhereUniqueInput {
  id: ID
  slug: String
}

input CommunityWhereInput {
  AND: [CommunityWhereInput!]
  OR: [CommunityWhereInput!]
  NOT: [CommunityWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  status: CommunityStatusTypeNullableFilter
  memberships: MembershipManyRelationFilter
}

input CommunityStatusTypeNullableFilter {
  equals: CommunityStatusType
  in: [CommunityStatusType!]
  notIn: [CommunityStatusType!]
  not: CommunityStatusTypeNullableFilter
}

input CommunityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

input CommunityUpdateInput {
  name: String
  slug: String
  description: String
  status: CommunityStatusType
  memberships: MembershipRelateToManyForUpdateInput
}

input CommunityUpdateArgs {
  where: CommunityWhereUniqueInput!
  data: CommunityUpdateInput!
}

input CommunityCreateInput {
  name: String
  slug: String
  description: String
  status: CommunityStatusType
  memberships: MembershipRelateToManyForCreateInput
}

type Membership {
  id: ID!
  owner: Person
  community: Community
  communityProfile: Profile
}

input MembershipWhereUniqueInput {
  id: ID
}

input MembershipWhereInput {
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  NOT: [MembershipWhereInput!]
  id: IDFilter
  owner: PersonWhereInput
  community: CommunityWhereInput
  communityProfile: ProfileWhereInput
}

input MembershipOrderByInput {
  id: OrderDirection
}

input MembershipUpdateInput {
  owner: PersonRelateToOneForUpdateInput
  community: CommunityRelateToOneForUpdateInput
  communityProfile: ProfileRelateToOneForUpdateInput
}

input CommunityRelateToOneForUpdateInput {
  create: CommunityCreateInput
  connect: CommunityWhereUniqueInput
  disconnect: Boolean
}

input ProfileRelateToOneForUpdateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
}

input MembershipUpdateArgs {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateInput!
}

input MembershipCreateInput {
  owner: PersonRelateToOneForCreateInput
  community: CommunityRelateToOneForCreateInput
  communityProfile: ProfileRelateToOneForCreateInput
}

input CommunityRelateToOneForCreateInput {
  create: CommunityCreateInput
  connect: CommunityWhereUniqueInput
}

input ProfileRelateToOneForCreateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createProfile(data: ProfileCreateInput!): Profile
  createProfiles(data: [ProfileCreateInput!]!): [Profile]
  updateProfile(where: ProfileWhereUniqueInput!, data: ProfileUpdateInput!): Profile
  updateProfiles(data: [ProfileUpdateArgs!]!): [Profile]
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteProfiles(where: [ProfileWhereUniqueInput!]!): [Profile]
  createCommunity(data: CommunityCreateInput!): Community
  createCommunities(data: [CommunityCreateInput!]!): [Community]
  updateCommunity(where: CommunityWhereUniqueInput!, data: CommunityUpdateInput!): Community
  updateCommunities(data: [CommunityUpdateArgs!]!): [Community]
  deleteCommunity(where: CommunityWhereUniqueInput!): Community
  deleteCommunities(where: [CommunityWhereUniqueInput!]!): [Community]
  createMembership(data: MembershipCreateInput!): Membership
  createMemberships(data: [MembershipCreateInput!]!): [Membership]
  updateMembership(where: MembershipWhereUniqueInput!, data: MembershipUpdateInput!): Membership
  updateMemberships(data: [MembershipUpdateArgs!]!): [Membership]
  deleteMembership(where: MembershipWhereUniqueInput!): Membership
  deleteMemberships(where: [MembershipWhereUniqueInput!]!): [Membership]
  endSession: Boolean!
  authenticatePersonWithPassword(email: String!, password: String!): PersonAuthenticationWithPasswordResult
  createInitialPerson(data: CreateInitialPersonInput!): PersonAuthenticationWithPasswordSuccess!
}

union PersonAuthenticationWithPasswordResult = PersonAuthenticationWithPasswordSuccess | PersonAuthenticationWithPasswordFailure

type PersonAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Person!
}

type PersonAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialPersonInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

type Query {
  person(where: PersonWhereUniqueInput!): Person
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  peopleCount(where: PersonWhereInput! = {}): Int
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProfileWhereUniqueInput): [Profile!]
  profilesCount(where: ProfileWhereInput! = {}): Int
  community(where: CommunityWhereUniqueInput!): Community
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  membership(where: MembershipWhereUniqueInput!): Membership
  memberships(where: MembershipWhereInput! = {}, orderBy: [MembershipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MembershipWhereUniqueInput): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Person

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
